import os
import sys
from dotenv import load_dotenv
from meraki import DashboardAPI

# Load environment variables
load_dotenv()
API_KEY = os.getenv("MERAKI_API_KEY")
ORG_ID = os.getenv("MERAKI_ORG_ID")

if not API_KEY or not ORG_ID:
    print("‚ùå API key or Org ID not found in .env file.")
    sys.exit(1)

# Initialize Meraki Dashboard API
dashboard = DashboardAPI(API_KEY, suppress_logging=True)

# ‚úÖ Load only valid Meraki network entries from environment
network_mapping = {
    key.upper(): value for key, value in os.environ.items()
    if key.upper() not in ("MERAKI_API_KEY", "MERAKI_ORG_ID") and value.startswith("N_")
}

# Ask user input
target = input("Enter network name (or type 'ALL' to apply to all): ").strip().upper()

# Read input files safely
if not os.path.exists("urls_to_block.txt"):
    print("‚ùå Error: 'urls_to_block.txt' file not found.")
    sys.exit(1)

if not os.path.exists("ips_to_block.txt"):
    print("‚ùå Error: 'ips_to_block.txt' file not found.")
    sys.exit(1)

with open("urls_to_block.txt") as f:
    urls = [line.strip() for line in f if line.strip()]

with open("ips_to_block.txt") as f:
    ips = [line.strip() for line in f if line.strip()]

# Prepare target networks
if target == "ALL":
    target_networks = network_mapping.items()
    print("üì° Targeting all networks:", list(network_mapping.keys()))
else:
    if target not in network_mapping:
        print("‚ùå Invalid network name.")
        sys.exit(1)
    target_networks = [(target, network_mapping[target])]

# üöÄ Apply rules
for name, net_id in target_networks:
    print(f"\nüîß Applying rules to {name} ({net_id})")

    try:
        # Update IP block
        rules = dashboard.appliance.getNetworkApplianceFirewallL3FirewallRules(net_id)["rules"]
        for ip in ips:
            rules.append({
                "comment": "Blocked via automation",
                "policy": "deny",
                "protocol": "any",
                "destCidr": ip,
                "srcCidr": "Any"
            })
        dashboard.appliance.updateNetworkApplianceFirewallL3FirewallRules(net_id, rules=rules)

        # Update URL block
        current = dashboard.appliance.getNetworkApplianceContentFiltering(net_id)
        combined = list(set(current.get("blockedUrlPatterns", []) + urls))
        dashboard.appliance.updateNetworkApplianceContentFiltering(
            net_id,
            blockedUrlPatterns=combined,
            allowedUrlPatterns=current.get("allowedUrlPatterns", []),
            urlCategoryListSize=current.get("urlCategoryListSize", "topSites"),
            urlCategoryList=current.get("urlCategoryList", [])
        )

        print(f"‚úÖ Done for {name}")

    except Exception as e:
        print(f"‚ùå Failed to update {name}: {e}")

print("\nüéâ All updates completed.")
